name: build

on:
  push:
    branches: [ main ]
    tags: [ v* ]
    paths-ignore:
      - '**/*.gitattributes'
      - '**/*.gitignore'
      - '**/*.md'
  pull_request:
    branches:
      - main
      - dotnet-vnext
      - dotnet-nightly
  workflow_dispatch:
    inputs:
      notarize:
        type: boolean
        default: false
        description: 'Whether to notarize the macOS app.'
        required: false

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_NOLOGO: true
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
  FORCE_COLOR: 1
  NUGET_XMLDOC_MODE: skip
  TERM: xterm

permissions:
  contents: read

jobs:
  build:
    name: ${{ matrix.os-name }}
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 20

    permissions:
      attestations: write
      contents: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - os-name: macos
            runner: macos-latest
          - os-name: linux
            runner: ubuntu-latest
          - os-name: windows
            runner: windows-latest

    steps:

    - name: Update agent configuration
      shell: pwsh
      run: |
        if ($IsWindows) {
          "DOTNET_INSTALL_DIR=D:\tools\dotnet" >> ${env:GITHUB_ENV}
          "DOTNET_ROOT=D:\tools\dotnet" >> ${env:GITHUB_ENV}
          "NUGET_PACKAGES=D:\.nuget\packages" >> ${env:GITHUB_ENV}
        } else {
          $nugetHome = "~/.nuget/packages"
          if (-Not (Test-Path $nugetHome)) {
            New-Item -Path $nugetHome -Type Directory -Force | Out-Null
          }
          $nugetHome = Resolve-Path $nugetHome
          "NUGET_PACKAGES=$nugetHome" >> ${env:GITHUB_ENV}
        }

    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        filter: 'tree:0'
        show-progress: false

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1

    - name: Setup Node
      uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
      with:
        node-version: '22'

    - name: Get npm cache directory
      id: npm-cache-dir
      shell: pwsh
      run: |
        "dir=$(npm config get cache)" >> ${env:GITHUB_OUTPUT}

    - name: Setup npm cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Setup NuGet cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Setup Playwright cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        key: ${{ runner.os }}-playwright-${{ hashFiles('Directory.Packages.props') }}
        path: |
          ~/AppData/Local/ms-playwright
          ~/.cache/ms-playwright
          ~/Library/Caches/ms-playwright

    - name: Build, test and publish
      id: build
      shell: pwsh
      run: ./build.ps1
      env:
        GoogleMapsApiKey: ${{ secrets.GOOGLE_MAPS_API_KEY }}

    - uses: codecov/codecov-action@0565863a31f2c772f9f0395002a31e3f06189574 # v5.4.0
      name: Upload coverage to Codecov
      with:
        files: ./artifacts/coverage/coverage.cobertura.xml,./src/AppleFitnessWorkoutMapper/coverage/lcov.info
        flags: ${{ matrix.os-name }}
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Generate SBOM
      uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # v0.18.0
      with:
        artifact-name: build-${{ matrix.os-name }}.spdx.json
        output-file: ./artifacts/build.spdx.json
        path: ./artifacts/publish
        upload-release-assets: ${{ runner.os == 'Linux' }}

    - name: GPG sign ZIP artifacts
      if: |
        runner.os == 'Linux' &&
        github.event.repository.fork == false &&
        (github.ref_name == github.event.repository.default_branch ||
         startsWith(github.ref, 'refs/tags/v') ||
         inputs.notarize == true)
      env:
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      shell: bash
      run: |
        curl -s "https://api.github.com/users/${GITHUB_REPOSITORY_OWNER}/gpg_keys" | jq -r '.[].raw_key' | gpg --import
        gpg --list-keys --with-colons | awk -F: '/^fpr:/ { print $10 }' | while read -r key; do
          echo "${key}:6:" | gpg --import-ownertrust
        done
        echo "${GPG_PRIVATE_KEY}" | gpg --import --batch --yes --passphrase "${GPG_PASSPHRASE}"
        find ./artifacts/publish -type f -name '*.zip' | while read -r fname; do
          echo "Signing ${fname}"
          gpg --batch --yes --pinentry-mode loopback --passphrase "${GPG_PASSPHRASE}" --detach-sig "${fname}"
          gpg --verify "${fname}.sig" "${fname}"
        done

    - name: Attest artifacts
      uses: actions/attest-build-provenance@c074443f1aee8d4aeeae555aebba3282517141b2 # v2.2.3
      if: |
        runner.os == 'Linux' &&
        github.event.repository.fork == false &&
        (github.ref_name == github.event.repository.default_branch ||
         startsWith(github.ref, 'refs/tags/v') ||
         inputs.notarize == true)
      with:
        subject-path: |
          ./artifacts/publish/AppleFitnessWorkoutMapper/AppleFitnessWorkoutMapper.zip
          ./artifacts/publish/AppleFitnessWorkoutMapper/AppleFitnessWorkoutMapper-linux-*.zip
          ./artifacts/publish/AppleFitnessWorkoutMapper/AppleFitnessWorkoutMapper-win-*.zip

    - name: Publish ZIP artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: runner.os == 'Linux'
      with:
        if-no-files-found: error
        name: app-zips
        path: |
          ./artifacts/publish/AppleFitnessWorkoutMapper/AppleFitnessWorkoutMapper.zip
          ./artifacts/publish/AppleFitnessWorkoutMapper/AppleFitnessWorkoutMapper.zip.sig
          ./artifacts/publish/AppleFitnessWorkoutMapper/AppleFitnessWorkoutMapper-linux-*.zip
          ./artifacts/publish/AppleFitnessWorkoutMapper/AppleFitnessWorkoutMapper-linux-*.zip.sig
          ./artifacts/publish/AppleFitnessWorkoutMapper/AppleFitnessWorkoutMapper-win-*.zip
          ./artifacts/publish/AppleFitnessWorkoutMapper/AppleFitnessWorkoutMapper-win-*.zip.sig

    - name: Publish macOS arm64 artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: runner.os == 'Linux'
      with:
        name: app-macos-arm64
        path: ./artifacts/publish/AppleFitnessWorkoutMapper/release_osx-arm64
        if-no-files-found: error

    - name: Publish macOS x64 artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: runner.os == 'Linux'
      with:
        name: app-macos-x64
        path: ./artifacts/publish/AppleFitnessWorkoutMapper/release_osx-x64
        if-no-files-found: error

    - name: Publish screenshots
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: ${{ !cancelled() }}
      with:
        name: screenshots-${{ matrix.os-name }}
        path: ./artifacts/screenshots/*.png
        if-no-files-found: ignore

    - name: Publish traces
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: ${{ !cancelled() }}
      with:
        name: traces-${{ matrix.os-name }}
        path: ./artifacts/traces/*
        if-no-files-found: ignore

    - name: Publish videos
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: ${{ !cancelled() }}
      with:
        name: videos-${{ matrix.os-name }}
        path: ./artifacts/videos/*
        if-no-files-found: ignore

    - name: Upload any crash dumps
      shell: pwsh
      if: |
        !cancelled() &&
        steps.build.outcome == 'failure' &&
        github.event.repository.fork == false &&
        github.event.sender.login != 'dependabot[bot]'
      env:
        AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.CRASH_DUMPS_STORAGE_CONNECTION_STRING }}
        PSCOMPRESSION_VERSION: '2.1.0'
      run: |
        $dumps = Get-ChildItem -Path ${env:GITHUB_WORKSPACE} -Filter "*.dmp" -Recurse
        if ($null -ne $dumps) {

          $container = ${env:GITHUB_REPOSITORY}.Replace("/", "-")
          az storage container create --name $container --public-access off | Out-Null

          Install-Module PSCompression -RequiredVersion ${env:PSCOMPRESSION_VERSION} -AcceptLicense -Force -Scope CurrentUser

          $dumps | ForEach-Object {
            $zipPath = $_.FullName + ".zip"
            $zipName = $_.Name + ".zip"

            Write-Output "Compressing crash dump $($_.Name)..."
            Compress-ZipArchive -Path $_.FullName -Destination $zipPath

            az storage blob upload `
              --container-name $container `
              --file $zipPath `
              --name $zipName `
              --metadata "GITHUB_RUN_ATTEMPT=${env:GITHUB_RUN_ATTEMPT}" "GITHUB_WORKFLOW=${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}/actions/runs/${env:GITHUB_RUN_ID}" "RUNNER_OS=${env:RUNNER_OS}" `
              --overwrite true

            if ($LASTEXITCODE -eq 0) {
              Write-Output "::notice::Uploaded crash dump $($_.Name) to Azure Storage."
            }
          }
        }

  notarize:
    if: |
      github.event.repository.fork == false &&
      (startsWith(github.ref, 'refs/tags/v') ||
       inputs.notarize == true)
    needs: [ build ]
    runs-on: macos-latest

    env:
      MACOS_APP_NAME: AppleFitnessWorkoutMapper.app
      MACOS_APP_PATH: ./artifacts/AppleFitnessWorkoutMapper.app
      MACOS_ARTIFACTS_PATH: ./artifacts

    permissions:
      attestations: write
      contents: read
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        platform: [ arm64, x64 ]
      max-parallel: 1

    steps:

    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        filter: 'tree:0'
        show-progress: false

    - name: Download artifacts
      uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
      with:
        name: app-macos-${{ matrix.platform }}
        path: ${{ env.MACOS_ARTIFACTS_PATH }}/publish

    - name: Generate macOS app
      shell: pwsh
      run: |
        $Artifacts = ${env:MACOS_ARTIFACTS_PATH}
        $AppPath = ${env:MACOS_APP_PATH}
        $ContentsPath = (Join-Path ${AppPath} "Contents")
        $ResourcesPath = (Join-Path ${ContentsPath} "Resources")
        $PublishPath = (Join-Path ${Artifacts} "publish")
        $SourcePath = "./src/AppleFitnessWorkoutMapper"
        New-Item -Path ${Artifacts} -Name ${env:MACOS_APP_NAME} -ItemType "Directory" | Out-Null
        New-Item -Path ${AppPath} -Name "Contents" -ItemType "Directory" | Out-Null
        New-Item -Path ${ContentsPath} -Name "Resources" -ItemType "Directory" | Out-Null
        Copy-Item -Path ${PublishPath} -Destination (Join-Path ${ContentsPath} "MacOS") -Recurse | Out-Null
        Copy-Item -Path (Join-Path ${SourcePath} "Info.plist") -Destination ${ContentsPath} | Out-Null
        Copy-Item -Path (Join-Path ${SourcePath} "PrivacyInfo.xcprivacy") -Destination ${ResourcesPath} | Out-Null

    - name: Configure Xcode
      uses: martincostello/xcode-select@db3d404e6e20374a638c10a68e3d804977ec19cb # node20
      with:
        version: '15.3'

    - name: Import Distribution Certificate
      uses: martincostello/import-signing-certificate@a80a8cdd27ba2b00e0e80480fb66c4149de04061 # node20
      with:
        certificate-data: ${{ secrets.DISTRIBUTION_CERTIFICATE_DATA }}
        certificate-passphrase: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSPHRASE }}
        keychain-name: ''
        keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

    - name: Sign app
      shell: bash
      env:
        APP_PATH: ${{ env.MACOS_APP_PATH }}
        ENTITLEMENTS: ./src/AppleFitnessWorkoutMapper/AppleFitnessWorkoutMapper.entitlements
        SIGNING_IDENTITY: ${{ secrets.SIGNING_IDENTITY }}
      run: |
        chmod +x "${APP_PATH}/Contents/MacOS/AppleFitnessWorkoutMapper"
        find "${APP_PATH}/Contents/MacOS/" | while read -r fname; do
          if [[ -f "${fname}" ]]; then
            echo "Signing ${fname}"
            codesign --force --timestamp --options=runtime --entitlements "${ENTITLEMENTS}" --sign "${SIGNING_IDENTITY}" "${fname}" || true
          fi
        done
        echo "Signing app file"
        codesign --force --timestamp --options=runtime --entitlements "${ENTITLEMENTS}" --sign "${SIGNING_IDENTITY}" "${APP_PATH}"

    - name: Notarize app
      uses: martincostello/xcode-notarize@b461d5783f3d2e7f94e71296e42804b1f81a9dc7 # notarytool
      with:
        product-path: ${{ env.MACOS_APP_PATH }}
        apple-id: ${{ secrets.NOTARIZATION_USERNAME }}
        app-password: ${{ secrets.NOTARIZATION_PASSWORD }}
        team-id: ${{ secrets.NOTARIZATION_TEAM_ID }}

    - name: Staple app
      uses: martincostello/xcode-staple@6961e581904dea5b988186057568c92667fb03a1 # node20
      with:
        product-path: ${{ env.MACOS_APP_PATH }}

    - name: Package signed app
      run: ditto -V -c -k --keepParent "${MACOS_APP_PATH}" ./artifacts/AppleFitnessWorkoutMapper-osx-${{ matrix.platform }}.zip

    - name: Publish signed app
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: app-macos-signed-${{ matrix.platform }}
        path: ./artifacts/AppleFitnessWorkoutMapper-osx-${{ matrix.platform }}.zip

    - name: GPG sign signed app
      env:
        APP_PLATFORM: ${{ matrix.platform }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      shell: bash
      run: |
        curl -s "https://api.github.com/users/${GITHUB_REPOSITORY_OWNER}/gpg_keys" | jq -r '.[].raw_key' | gpg --import
        gpg --list-keys --with-colons | awk -F: '/^fpr:/ { print $10 }' | while read -r key; do
          echo "${key}:6:" | gpg --import-ownertrust
        done
        echo "${GPG_PRIVATE_KEY}" | gpg --import --batch --yes --passphrase "${GPG_PASSPHRASE}"
        gpg --batch --yes --pinentry-mode loopback --passphrase "${GPG_PASSPHRASE}" --detach-sig "./artifacts/AppleFitnessWorkoutMapper-osx-${APP_PLATFORM}.zip"
        gpg --verify "./artifacts/AppleFitnessWorkoutMapper-osx-${APP_PLATFORM}.zip.sig" "./artifacts/AppleFitnessWorkoutMapper-osx-${APP_PLATFORM}.zip"

    - name: Attest artifacts
      uses: actions/attest-build-provenance@c074443f1aee8d4aeeae555aebba3282517141b2 # v2.2.3
      with:
        subject-path: ./artifacts/AppleFitnessWorkoutMapper-osx-${{ matrix.platform }}.zip

    - name: Publish notarized ZIP artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: app-zips-notarized-${{ matrix.platform }}
        path: |
          ./artifacts/AppleFitnessWorkoutMapper-osx-${{ matrix.platform }}.zip
          ./artifacts/AppleFitnessWorkoutMapper-osx-${{ matrix.platform }}.zip.sig

  release:
    if: github.event.repository.fork == false && startsWith(github.ref, 'refs/tags/v')
    needs: [ notarize ]
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:

    - name: Download Linux and Windows artifacts
      uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
      with:
        name: app-zips
        path: .

    - name: Download macOS arm64 artifacts
      uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
      with:
        name: app-zips-notarized-arm64
        path: .

    - name: Download macOS x64 artifacts
      uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
      with:
        name: app-zips-notarized-x64
        path: .

    - name: Create GitHub release
      uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # v2.2.1
      with:
        files: |
          *.zip
          *.zip.sig
