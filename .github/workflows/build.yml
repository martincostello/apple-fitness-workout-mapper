name: build

on:
  push:
    branches: [ main ]
    tags: [ v* ]
    paths-ignore:
    - '**/*.md'
    - '**/*.gitignore'
    - '**/*.gitattributes'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_MULTILEVEL_LOOKUP: 0
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  MACOS_APP_PATH: ./artifacts/publish
  NUGET_XMLDOC_MODE: skip

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        include:
          #- os: macos-latest
          #  codecov_os: macos
          - os: ubuntu-latest
            codecov_os: linux
          #- os: windows-latest
          #  codecov_os: windows

    steps:

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1

    - name: Build, test and publish
      shell: pwsh
      run: ./build.ps1

    - uses: codecov/codecov-action@v1
      name: Upload coverage to Codecov
      with:
        file: ./artifacts/coverage.cobertura.xml
        flags: ${{ matrix.codecov_os }}

    - name: Publish ZIP artifacts
      uses: actions/upload-artifact@v2
      if: ${{ runner.os == 'Linux' }}
      with:
        name: app-zips
        path: ./artifacts/publish/*.zip

    - name: Publish macOS artifacts
      uses: actions/upload-artifact@v2
      if: ${{ runner.os == 'Linux' }}
      with:
        name: app-macos
        path: ./artifacts/publish/osx-x64

  notarize:
    #if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    name: notarize
    needs: build
    runs-on: macos-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: app-macos
        path: ${{ env.MACOS_APP_PATH }}

    - name: Configure Xcode
      uses: devbotsxyz/xcode-select@v1
      with:
        version: "12.4"

    - name: Import Distribution Certificate
      uses: devbotsxyz/import-signing-certificate@v1
      with:
        certificate-data: ${{ secrets.DISTRIBUTION_CERTIFICATE_DATA }}
        certificate-passphrase: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSPHRASE }}
        keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

    - name: Sign app
      shell: bash
      env:
        APP_PATH: ${{ env.MACOS_APP_PATH }}
        ENTITLEMENTS: ./src/AppleFitnessWorkoutMapper/AppleFitnessWorkoutMapper.entitlements
        SIGNING_IDENTITY: ${{ secrets.SIGNING_IDENTITY }}
      run: |
        chmod +x $APP_PATH/AppleFitnessWorkoutMapper
        find "$APP_PATH/"|while read fname; do
            if [[ -f $fname ]]; then
                echo "Signing $fname"
                codesign --force --timestamp --options=runtime --entitlements "$ENTITLEMENTS" --sign "$SIGNING_IDENTITY" "$fname" || true
            fi
        done

    - name: Notarize app
      uses: devbotsxyz/xcode-notarize@v1
      with:
        primary-bundle-id: com.martincostello.applefitnessworkoutmapper
        product-path: ${{ env.MACOS_APP_PATH }}
        appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
        appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}

    - name: Staple app
      uses: devbotsxyz/xcode-staple@v1
      with:
        product-path: ${{ env.MACOS_APP_PATH }}/AppleFitnessWorkoutMapper

    - name: Package signed app
      run: ditto -V -c -k --keepParent ${{ env.MACOS_APP_PATH }} ./artifacts/AppleFitnessWorkoutMapper-osx-x64.zip

    - name: Publish signed app
      uses: actions/upload-artifact@v2
      with:
        name: app-macos-signed
        path: ./artifacts/AppleFitnessWorkoutMapper-osx-x64.zip

    - name: Update macOS ZIP artifact
      uses: actions/upload-artifact@v2
      with:
        name: app-zips
        path: ./artifacts/AppleFitnessWorkoutMapper-osx-x64.zip

  release:
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    name: release
    needs: notarize
    runs-on: windows-latest

    steps:

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: app-zips

    - name: Create GitHub release
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        files: '*.zip'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
